{"/home/travis/build/npmtest/node-npmtest-coinbase-exchange/test.js":"/* istanbul instrument in package npmtest_coinbase_exchange */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-coinbase-exchange/lib.npmtest_coinbase_exchange.js":"/* istanbul instrument in package npmtest_coinbase_exchange */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_coinbase_exchange = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_coinbase_exchange = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-coinbase-exchange/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-coinbase-exchange && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_coinbase_exchange */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_coinbase_exchange\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_coinbase_exchange.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_coinbase_exchange.rollup.js'] =\n            local.assetsDict['/assets.npmtest_coinbase_exchange.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_coinbase_exchange.__dirname + '/lib.npmtest_coinbase_exchange.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-coinbase-exchange/node_modules/coinbase-exchange/index.js":"var PublicClient        = require('./lib/clients/public.js');\nvar WebsocketClient     = require('./lib/clients/websocket.js');\nvar AuthenticatedClient = require('./lib/clients/authenticated.js');\nvar Orderbook           = require('./lib/orderbook.js');\nvar OrderbookSync       = require('./lib/orderbook_sync.js');\n\nmodule.exports = exports = {\n  'PublicClient'       : PublicClient,\n  'WebsocketClient'    : WebsocketClient,\n  'AuthenticatedClient': AuthenticatedClient,\n  'Orderbook'          : Orderbook,\n  'OrderbookSync'      : OrderbookSync,\n};\n","/home/travis/build/npmtest/node-npmtest-coinbase-exchange/node_modules/coinbase-exchange/lib/clients/public.js":"var request = require('request');\nvar _ = {\n  'forEach': require('lodash.foreach'),\n  'assign': require('lodash.assign'),\n  'partial': require('lodash.partial'),\n};\n\nvar Readable = require('stream').Readable;\n\nvar PublicClient = function(productID, apiURI) {\n  var self = this;\n  self.productID = productID || 'BTC-USD';\n  self.apiURI = apiURI || 'https://api.gdax.com';\n};\n\nvar API_LIMIT = 100;\n\n_.assign(PublicClient.prototype, new function() {\n  var prototype = this;\n\n  prototype.addHeaders = function(obj, additional) {\n    obj.headers = obj.headers || {};\n    return _.assign(obj.headers, {\n      'User-Agent': 'coinbase-node-client',\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n    }, additional);\n  };\n\n  prototype.makeRelativeURI = function(parts) {\n    return '/' + parts.join('/');\n  };\n\n  prototype.makeAbsoluteURI = function(relativeURI) {\n    return this.apiURI + relativeURI;\n  };\n\n  prototype.makeRequestCallback = function(callback) {\n    return function(err, response, data) {\n      try {\n        data = JSON.parse(data);\n      } catch (e) {\n        data = null\n      }\n      callback(err, response, data);\n    };\n  };\n\n  prototype.request = function(method, uriParts, opts, callback) {\n    var self = this;\n    opts = opts || {};\n    if (!callback && (typeof opts === 'function')) {\n      callback = opts;\n      opts = {};\n    }\n    if (!callback) {\n      throw \"Must supply a callback.\"\n    }\n    _.assign(opts, {\n      'method': method.toUpperCase(),\n      'uri': self.makeAbsoluteURI(self.makeRelativeURI(uriParts)),\n    });\n    self.addHeaders(opts);\n    request(opts, self.makeRequestCallback(callback));\n  };\n\n  _.forEach(['get', 'post', 'put', 'delete'], function(method) {\n    prototype[method] = _.partial(prototype.request, method);\n  });\n\n  prototype.getProducts = function(callback) {\n    var self = this;\n    return prototype.get.call(self, ['products'], callback);\n  };\n\n  prototype.getProductOrderBook = function(args, callback) {\n    var self = this;\n\n    args = args || {}\n    if (!callback && (typeof args === 'function')) {\n      callback = args;\n      args = {};\n    }\n\n    var opts = { 'qs': args };\n    return prototype.get.call(\n        self, ['products', self.productID, 'book'], opts, callback);\n  };\n\n  prototype.getProductTicker = function(callback) {\n    var self = this;\n    return prototype.get.call(self, ['products', self.productID, 'ticker'], callback);\n  };\n\n  prototype.getProductTrades = function(args, callback) {\n    var self = this;\n\n    args = args || {}\n    if (!callback && (typeof args === 'function')) {\n      callback = args;\n      args = {};\n    }\n\n    var opts = {'qs': args};\n    return prototype.get.call(self, ['products', self.productID, 'trades'], opts, callback);\n  };\n\n  prototype.getProductTradeStream = function(tradesFrom, tradesTo) {\n    var self = this;\n    var shouldStop = null;\n\n    if (typeof tradesTo === 'function') {\n      shouldStop = tradesTo;\n      tradesTo = null;\n    }\n\n    var rs = new Readable({objectMode: true});\n    var started = false;\n\n    rs._read = function() {\n      if (!started) {\n        started = true;\n        fetchTrades(self, rs, tradesFrom, tradesTo, shouldStop, 0);\n      }\n    };\n\n    return rs;\n  }\n\n  function fetchTrades(ctx, stream, tradesFrom, tradesTo, shouldStop) {\n    var after = tradesFrom + API_LIMIT + 1;\n    var loop = true;\n\n    if (tradesTo && tradesTo <= after) {\n      after = tradesTo;\n      loop = false;\n    }\n\n    var opts = { before: tradesFrom, after: after, limit: API_LIMIT };\n\n    prototype.getProductTrades.call(ctx, opts, function(err, resp, data) {\n      if (err) {\n        stream.emit('error', err);\n        return;\n      }\n\n      if (resp.statusCode === 429) {\n        // rate-limited, try again\n        setTimeout(function() {\n          fetchTrades(ctx, stream, tradesFrom, tradesTo, shouldStop);\n        }, 900);\n        return;\n      }\n\n      if (resp.statusCode !== 200) {\n        stream.emit('error', new Error('Encountered status code ' + resp.statusCode));\n      }\n\n      for (var i = data.length - 1; i >= 0; i--) {\n        if (shouldStop && shouldStop(data[i])) {\n          stream.push(null);\n          return;\n        }\n\n        stream.push(data[i]);\n      }\n\n      if (!loop) {\n        stream.push(null);\n        return;\n      }\n\n      fetchTrades(ctx, stream, tradesFrom + API_LIMIT, tradesTo, shouldStop);\n    });\n  }\n\n  prototype.getProductHistoricRates = function(args, callback) {\n    var self = this;\n\n    args = args || {}\n    if (!callback && (typeof args === 'function')) {\n      callback = args;\n      args = {};\n    }\n\n    var opts = {'qs': args};\n    return prototype.get.call(self, ['products', self.productID, 'candles'], opts, callback);\n  };\n\n  prototype.getProduct24HrStats = function(callback) {\n    var self = this;\n    return prototype.get.call(self, ['products', self.productID, 'stats'], callback);\n  };\n\n  prototype.getCurrencies = function(callback) {\n    var self = this;\n    return prototype.get.call(self, ['currencies'], callback);\n  };\n\n  prototype.getTime = function(callback) {\n    var self = this;\n    return prototype.get.call(self, ['time'], callback);\n  };\n});\n\nmodule.exports = exports = PublicClient;\n","/home/travis/build/npmtest/node-npmtest-coinbase-exchange/node_modules/coinbase-exchange/lib/clients/websocket.js":"var EventEmitter = require('events').EventEmitter;\nvar Websocket = require('ws');\nvar util = require('util');\nvar _  = {assign: require('lodash.assign')};\n\nvar WebsocketClient = function(productID, websocketURI) {\n  var self = this;\n  self.productID = productID || 'BTC-USD';\n  self.websocketURI = websocketURI || 'wss://ws-feed.gdax.com';\n  EventEmitter.call(self);\n  self.connect();\n};\n\nutil.inherits(WebsocketClient, EventEmitter);\n\n_.assign(WebsocketClient.prototype, new function() {\n  var prototype = this;\n\n  prototype.connect = function() {\n    var self = this;\n\n    if (self.socket) {\n      self.socket.close();\n    }\n\n    self.socket = new Websocket(self.websocketURI);\n\n    self.socket.on('message', self.onMessage.bind(self));\n    self.socket.on('open', self.onOpen.bind(self));\n    self.socket.on('close', self.onClose.bind(self));\n  };\n\n  prototype.disconnect = function() {\n    var self = this;\n\n    if (!self.socket) {\n      throw \"Could not disconnect (not connected)\"\n    }\n\n    self.socket.close();\n  };\n\n  prototype.onOpen = function() {\n    var self = this;\n    self.emit('open');\n    var subscribeMessage = {\n      type: 'subscribe',\n      product_id: self.productID,\n    };\n    self.socket.send(JSON.stringify(subscribeMessage));\n\n    // Set a 30 second ping to keep connection alive\n    self.pinger = setInterval(function(){\n      self.socket.ping(\"keepalive\");\n    }, 30000);\n\n  };\n\n  prototype.onClose = function() {\n    var self = this;\n    clearInterval(self.pinger);\n    self.socket = null;\n    self.emit('close');\n  };\n\n  prototype.onMessage = function(data) {\n    var self = this;\n    self.emit('message', JSON.parse(data));\n  };\n});\n\nmodule.exports = exports = WebsocketClient;\n","/home/travis/build/npmtest/node-npmtest-coinbase-exchange/node_modules/coinbase-exchange/lib/clients/authenticated.js":"var util = require('util');\nvar crypto = require('crypto');\nvar querystring = require('querystring');\nvar async = require('async');\n\nvar _ = {\n  'forEach': require('lodash.foreach'),\n  'assign': require('lodash.assign'),\n  'partial': require('lodash.partial'),\n};\nvar request = require('request');\n\nvar PublicClient = require('./public.js');\n\n\nvar AuthenticatedClient = function(key, b64secret, passphrase, apiURI) {\n  var self = this;\n\n  PublicClient.call(self, '', apiURI);\n  self.key = key;\n  self.b64secret = b64secret;\n  self.passphrase = passphrase;\n};\n\nutil.inherits(AuthenticatedClient, PublicClient);\n\n_.assign(AuthenticatedClient.prototype, new function() {\n  var prototype = this;\n\n  prototype.request = function(method, uriParts, opts, callback) {\n    var self = this;\n\n    opts = opts || {};\n    if (!callback && (typeof opts === 'function')) {\n      callback = opts;\n      opts = {};\n    }\n\n    if (!callback) {\n      throw \"Must supply a callback\"\n    }\n\n    var relativeURI = self.makeRelativeURI(uriParts);\n    method = method.toUpperCase();\n    _.assign(opts, {\n      'method': method,\n      'uri': self.makeAbsoluteURI(relativeURI)\n    });\n\n    self.addHeaders(opts, self._getSignature(method, relativeURI, opts));\n    request(opts, self.makeRequestCallback(callback));\n  };\n\n  prototype._getSignature = function(method, relativeURI, opts) {\n    var self = this;\n    var body = '';\n\n    if (opts.body) {\n      body = JSON.stringify(opts.body);\n      opts.body = body;\n    } else if (opts.qs && Object.keys(opts.qs).length !== 0) {\n      body = '?' + querystring.stringify(opts.qs);\n    }\n\n    var timestamp = Date.now() / 1000;\n    var what = timestamp + method + relativeURI + body;\n    var key = Buffer(self.b64secret, 'base64');\n    var hmac = crypto.createHmac('sha256', key);\n    var signature = hmac.update(what).digest('base64');\n    return {\n      'CB-ACCESS-KEY': self.key,\n      'CB-ACCESS-SIGN': signature,\n      'CB-ACCESS-TIMESTAMP': timestamp,\n      'CB-ACCESS-PASSPHRASE': self.passphrase,\n    };\n  };\n\n  _.forEach(['get', 'post', 'put', 'delete'], function(method) {\n    prototype[method] = _.partial(prototype.request, method);\n  });\n\n  prototype.getAccounts = function(callback) {\n    var self = this;\n    return prototype.get.call(self, ['accounts'], callback);\n  };\n\n  prototype.getAccount = function(accountID, callback) {\n    var self = this;\n    return prototype.get.call(self, ['accounts', accountID], callback);\n  };\n\n  prototype.getAccountHistory = function(accountID, args, callback) {\n    var self = this;\n\n    args = args || {}\n    if (!callback && (typeof args === 'function')) {\n      callback = args;\n      args = {};\n    }\n\n    var opts = { 'qs': args };\n    return prototype.get.call(self, ['accounts', accountID, 'ledger'], opts, callback);\n  };\n\n  prototype.getAccountHolds = function(accountID, args, callback) {\n    var self = this;\n\n    args = args || {}\n    if (!callback && (typeof args === 'function')) {\n      callback = args;\n      args = {};\n    }\n\n    var opts = { 'qs': args };\n    return prototype.get.call(self, ['accounts', accountID, 'holds'], opts, callback);\n  };\n\n  prototype._placeOrder = function(params, callback) {\n    var self = this;\n\n    var requiredParams = ['size', 'side', 'product_id'];\n\n    if (params.type !== 'market') {\n      requiredParams.push('price');\n    }\n\n    _.forEach(requiredParams, function(param) {\n      if (params[param] === undefined) {\n        throw \"`opts` must include param `\" + param + \"`\";\n      }\n    });\n    var opts = { 'body': params };\n    return prototype.post.call(self, ['orders'], opts, callback);\n  };\n\n  prototype.buy = function(params, callback) {\n    var self = this;\n    params.side = 'buy';\n    return self._placeOrder(params, callback);\n  };\n\n  prototype.sell = function(params, callback) {\n    var self = this;\n    params.side = 'sell';\n    return self._placeOrder(params, callback);\n  };\n\n  prototype.cancelOrder = function(orderID, callback) {\n    var self = this;\n\n    if (!callback && (typeof orderID === 'function')) {\n      callback = orderID;\n      callback(new Error('must provide an orderID or consider cancelOrders'));\n      return;\n    }\n\n    return prototype.delete.call(self, ['orders', orderID], callback);\n  };\n\n  prototype.cancelOrders = function(callback) {\n    var self = this;\n    return prototype.delete.call(self, ['orders'], callback);\n  };\n\n  // temp over ride public call to get Product Orderbook\n  prototype.getProductOrderBook = function(args, productId, callback) {\n    var self = this;\n\n    args = args || {}\n    if (!callback && (typeof args === 'function')) {\n      callback = args;\n      args = {};\n    }\n\n    var opts = { 'qs': args };\n    return prototype.get.call(self, ['products', productId, 'book'], opts, callback);\n  };\n\n\n  prototype.cancelAllOrders = function(args, callback) {\n    var self = this;\n    var currentDeletedOrders = [];\n    var totalDeletedOrders = [];\n    var query = true;\n    var response;\n\n    args = args || {}\n    if (!callback && (typeof args === 'function')) {\n      callback = args;\n      args = {};\n    }\n\n    var opts = { 'qs': args };\n\n    async.doWhilst(\n      deleteOrders,\n      untilEmpty,\n      completed\n    );\n\n    function deleteOrders(done) {\n      prototype.delete.call(self, ['orders'], opts, function(err, resp, data) {\n\n        if (err) {\n          done(err);\n          return;\n        }\n\n        if ((resp && resp.statusCode != 200) || !data) {\n          var err = new Error('Failed to cancel all orders');\n          query = false;\n          done(err);\n          return;\n        }\n\n        currentDeletedOrders = data;\n        totalDeletedOrders = totalDeletedOrders.concat(currentDeletedOrders);\n        response = resp;\n\n        done();\n      });\n    }\n\n    function untilEmpty() {\n      return (currentDeletedOrders.length > 0 && query)\n    }\n\n    function completed(err) {\n      callback(err, response, totalDeletedOrders);\n    }\n  };\n\n  prototype.getOrders = function(args, callback) {\n    var self = this;\n\n    args = args || {}\n    if (!callback && (typeof args === 'function')) {\n      callback = args;\n      args = {};\n    }\n\n    var opts = { 'qs': args };\n    return prototype.get.call(self, ['orders'], opts, callback);\n  };\n\n  prototype.getOrder = function(orderID, callback) {\n    var self = this;\n\n    if (!callback && (typeof orderID === 'function')) {\n      callback = orderID;\n      callback(new Error('must provide an orderID or consider getOrders'));\n      return;\n    }\n\n    return prototype.get.call(self, ['orders', orderID], callback);\n  };\n\n  prototype.getFills = function(args, callback) {\n    var self = this;\n\n    args = args || {}\n    if (!callback && (typeof args === 'function')) {\n      callback = args;\n      args = {};\n    }\n\n    var opts = { 'qs': args };\n    return prototype.get.call(self, ['fills'], opts, callback);\n  };\n\n  prototype.deposit = function(params, callback) {\n    var self = this;\n    params.type = 'deposit';\n    return self._transferFunds(params, callback);\n  };\n\n  prototype.withdraw = function(params, callback) {\n    var self = this;\n    params.type = 'withdraw';\n    return self._transferFunds(params, callback);\n  };\n\n  prototype._transferFunds = function(params, callback) {\n    var self = this;\n    _.forEach(['type', 'amount', 'coinbase_account_id'], function(param) {\n      if (params[param] === undefined) {\n        throw \"`opts` must include param `\" + param + \"`\";\n      }\n    });\n    var opts = { 'body': params };\n    return prototype.post.call(self, ['transfers'], opts, callback);\n  };\n\n});\n\nmodule.exports = exports = AuthenticatedClient;\n","/home/travis/build/npmtest/node-npmtest-coinbase-exchange/node_modules/coinbase-exchange/lib/orderbook.js":"var RBTree = require('bintrees').RBTree;\nvar num = require('num');\nvar assert = require('assert');\nvar _ = {assign: require('lodash.assign')}\n\nvar Orderbook = function() {\n  var self = this;\n\n  // Orders hashed by ID\n  self._ordersByID = {};\n\n  self._bids = new RBTree(function(a, b) {\n    return a.price.cmp(b.price);\n  });\n\n  self._asks = new RBTree(function(a, b) {\n    return a.price.cmp(b.price);\n  });\n};\n\n_.assign(Orderbook.prototype, new function() {\n  var prototype = this;\n\n  prototype._getTree = function(side) {\n    return side == 'buy' ? this._bids : this._asks;\n  };\n\n  prototype.state = function(book) {\n    var self = this;\n\n    if (book) {\n\n      book.bids.forEach(function(order) {\n        order = {\n          id: order[2],\n          side: 'buy',\n          price: num(order[0]),\n          size: num(order[1])\n        }\n        self.add(order);\n      });\n\n      book.asks.forEach(function(order) {\n        order = {\n          id: order[2],\n          side: 'sell',\n          price: num(order[0]),\n          size: num(order[1])\n        }\n        self.add(order);\n      });\n\n    } else {\n\n      book = {\n        asks: [],\n        bids: []\n      };\n\n      self._bids.reach(function(bid) {\n        bid.orders.forEach(function(order) {\n          book.bids.push(order);\n        });\n      });\n\n      self._asks.each(function(ask) {\n        ask.orders.forEach(function(order) {\n          book.asks.push(order);\n        });\n      });\n\n      return book;\n    }\n  };\n\n  prototype.get = function(orderId) {\n    return this._ordersByID[orderId]\n  };\n\n  prototype.add = function(order) {\n    var self = this;\n\n    order = {\n      id: order.order_id || order.id,\n      side: order.side,\n      price: num(order.price),\n      size: num(order.size || order.remaining_size),\n    };\n\n    var tree = self._getTree(order.side);\n    var node = tree.find({price: order.price});\n\n    if (!node) {\n      node = {\n        price: order.price,\n        orders: []\n      }\n      tree.insert(node);\n    }\n\n    node.orders.push(order);\n    self._ordersByID[order.id] = order;\n  };\n\n  prototype.remove = function(orderId) {\n    var self = this;\n    var order = self.get(orderId);\n\n    if (!order) {\n      return;\n    }\n\n    var tree = self._getTree(order.side);\n    var node = tree.find({price: order.price});\n    assert(node);\n    var orders = node.orders;\n\n    orders.splice(orders.indexOf(order), 1);\n\n    if (orders.length === 0) {\n      tree.remove(node);\n    }\n\n    delete self._ordersByID[order.id];\n  };\n\n  prototype.match = function(match) {\n    var self = this;\n\n    var size = num(match.size);\n    var price = num(match.price);\n    var tree = self._getTree(match.side);\n    var node = tree.find({price: price});\n    assert(node);\n\n    var order = node.orders[0];\n    assert.equal(order.id, match.maker_order_id);\n\n    order.size = order.size.sub(size);\n    self._ordersByID[order.id] = order;\n\n    assert(order.size >= 0);\n\n    if (order.size.eq(0)) {\n      self.remove(order.id);\n    }\n  };\n\n  prototype.change = function(change) {\n    var self = this;\n\n    var size = num(change.new_size);\n    var price = num(change.price);\n    var order = self.get(change.order_id)\n    var tree = self._getTree(change.side);\n    var node = tree.find({price: price});\n\n    if (!node || node.orders.indexOf(order) < 0) {\n      return;\n    }\n\n    var nodeOrder = node.orders[node.orders.indexOf(order)];\n\n    var newSize = parseFloat(order.size);\n    var oldSize = parseFloat(change.old_size);\n    \n    assert.equal(oldSize, newSize);\n\n    nodeOrder.size = size;\n    self._ordersByID[nodeOrder.id] = nodeOrder;\n  };\n\n});\n\n\nmodule.exports = exports = Orderbook;\n","/home/travis/build/npmtest/node-npmtest-coinbase-exchange/node_modules/coinbase-exchange/lib/orderbook_sync.js":"var WebsocketClient = require('./clients/websocket.js');\nvar PublicClient = require('./clients/public.js');\nvar Orderbook = require('./orderbook.js');\nvar util = require('util');\nvar _ = {\n  forEach: require('lodash.foreach'),\n  assign: require('lodash.assign'),\n};\n\n// Orderbook syncing\nvar OrderbookSync = function(productID, apiURI, websocketURI, authenticatedClient) {\n  var self = this;\n\n  self.productID = productID || 'BTC-USD';\n  self.apiURI = apiURI || 'https://api.gdax.com';\n  self.websocketURI = websocketURI || 'wss://ws-feed.gdax.com';\n  self.authenticatedClient = authenticatedClient;\n\n  self._queue = [];\n  self._sequence = -1;\n\n  WebsocketClient.call(self, self.productID, self.websocketURI);\n  self.loadOrderbook();\n};\n\nutil.inherits(OrderbookSync, WebsocketClient);\n\n_.assign(OrderbookSync.prototype, new function() {\n  var prototype = this;\n\n  prototype.onMessage = function(data) {\n    var self = this;\n    data = JSON.parse(data);\n\n    if (self._sequence ===  -1) {\n      // Orderbook snapshot not loaded yet\n      self._queue.push(data);\n    } else {\n      self.processMessage(data);\n    }\n  };\n\n  prototype.loadOrderbook = function() {\n    var self = this;\n    var bookLevel = 3;\n    var args = { 'level': bookLevel };\n\n    self.book = new Orderbook();\n\n    if (self.authenticatedClient) {\n      self.authenticatedClient.getProductOrderBook(args, self.productID, cb);\n    }\n    else {\n      if (!self.publicClient) {\n        self.publicClient = new PublicClient(self.productID, self.apiURI);\n      }\n      self.publicClient.getProductOrderBook(args, cb);\n    }\n\n    function cb(err, response, body) {\n      if (err) {\n        throw 'Failed to load orderbook: ' + err;\n      }\n\n      if (response.statusCode !== 200) {\n        throw 'Failed to load orderbook: ' + response.statusCode;\n      }\n\n      var data = JSON.parse(response.body);\n      self.book.state(data);\n\n      self._sequence = data.sequence;\n      _.forEach(self._queue, self.processMessage.bind(self));\n      self._queue = [];\n    };\n  };\n\n  prototype.processMessage = function(data) {\n    var self = this;\n\n    if (self._sequence == -1) {\n      // Resync is in process\n      return;\n    }\n    if (data.sequence <= self._sequence) {\n      // Skip this one, since it was already processed\n      return;\n    }\n\n    if (data.sequence != self._sequence + 1) {\n      // Dropped a message, start a resync process\n      self._queue = [];\n      self._sequence = -1;\n\n      self.loadOrderbook();\n      return;\n    }\n\n    self._sequence = data.sequence;\n\n    switch (data.type) {\n      case 'open':\n        self.book.add(data);\n        break;\n\n      case 'done':\n        self.book.remove(data.order_id);\n        break;\n\n      case 'match':\n        self.book.match(data);\n        break;\n\n      case 'change':\n        self.book.change(data);\n        break;\n    }\n  };\n\n});\n\nmodule.exports = exports = OrderbookSync;\n"}